<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LLVM编译器框架浅析]]></title>
    <url>%2F2018%2F04%2F10%2Fllvm-clang%2F</url>
    <content type="text"><![CDATA[很早就开始接触和使用LLVM，而且垂涎其丰富的工具和扩展功能已久，但一直处于现学现用的阶段，对LLVM的理解也一直是雾里看花。最近正好需要再次用到LLVM，借此机会把LLVM系统的看一看，不求深挖，但求基础全面。本文主要是用于整理记录笔记，摘录一些我认为比较重要和有用的信息，作为日后参考。 1, 什么是LLVMLLVM从字面上来说是Low-level Virtual Machine，即底层的虚拟机，光从字面上来说看，仍然是一脸懵逼，不知其所以然。 官方介绍定义比较准确：A collection of modular and reusable tools to support both static and dynamic compilation of arbitrary programming languages. 理解一下，主要包含了这几层意思： 1，当然，是编译器（或者编译框架） 2，包含了一个模块化、可重用的工具集； 3，支持静态和动态编译； 4，跨语言。 总之，LLVM是一套很强大的编译系统。 此外，LLVM提供了许多工业级的工具和库，包含了许多子项目，其中最有名的当属Clang。LLVM在工业界也得到了广泛的使用，包括Adobe, Apple, Intel, NVIDIA……等等等等。 总结一下，LLVM具有使用简单（相对而言）， 快速，模块化等诸多有点，it is cool! 2, LLVM 编译系统LLVM编译系统可分为编译器基础组件和编译器框架两部分。 LLVM编译器基础组件为构建编译器提供了可重用的组件，使得构建一个新的编译器的时间开销更小，也为LLVM编译器提供了更多的功能和更好的扩展性。LLVM编译器框架提供了一种编译器框架，通过框架将LLVM编译系统中的基础组件进行组合连接，进而形成具备特定属性、满足特定需求的编译器。框架包含前端、中端和后端三个部分。简单地说，前端将目标语言翻译成LLVM中间语言（LLVM IR），中端基于LLVM IR对程序进行优化分析等，后端将LLVM IR翻译成目标架构的机器指令。整理LLVM编译系统的整体内容如下： 前端： Clang(C/C++/ObjC/OpenCL/OpenMP), flang(Fortran), LDC(D), PGI’s Fortran, etc. 前端插件: Static analyser, clang-tidy, clang-format, clang-complete, etc. 中端: Optimiztion and Analysis passes, integration with Polly, etc. 后端 JIT(MC and ORC), targets: ARM, AArch64, MIPS, PPC, x86, GPUs, BPF, WebAsm, etc. 库 Compiler-RT, libc++/abi, libunwind, OpenMP, libCL, etc. 工具 LLD, LLDB, LNT, readobj, llc, lli, bugpoint, objdump, lto, etc. 下表对LLVM和GNU编译器进行了对比。| | LLVM | GNU || ———- | —————————- | ———————— || Front-end | Clang | CC1/CPP || Middle-end | LLVM | GCC || Back-end | LLVM | GCC || Assembler | LLVM(MC) | GAS || Linker | LLD | GNU-LD || Libraries | Compiler-RT, libc++(no libc) | libgcc, stdlibc++, glibc || Debugger | LLDB/LLDBserver | GDB/GDBserver | 2.1 前端和所有编译器前端类似，LLVM编译器前端对目标源代码进行解析，最终生成LLVM IR.123456sc=&gt;start: Source Codeps=&gt;inputoutput: Parserapi=&gt;inputoutput: LLVM APIir=&gt;end: LLVM IRsc(right)-&gt;ps(right)-&gt;api(right)-&gt;ir LLVM API: Module IRBuilder Function BasicBlock Instruction 2.2 中端中端接着前端的工作，在IR的基础上对程序进行转换和优化，如下图。123456789graph LRSc[Source Code] --&gt;Fr(Frountend)Fr --&gt; IR(IR)IR --&gt; Pass(Pass)Pass --&gt; Dot(...)Dot --&gt; P2(Pass)P2 --&gt; IR2(IR)IR2 --&gt; Bk(Backend)Bk --&gt; As(Assembly) 要理解中端的优化过程，理解Pass非常重要。如LLVM官网所述： The LLVM Pass Framework is an important part of the LLVM system, because LLVM passes are where most of the interesting parts of the compiler exist. Passes perform the transformations and optimizations that make up the compiler, they build the analysis results that are used by these transformations, and they are, above all, a structuring technique for compiler code. LLVM编译系统中对程序的优化分为多个步骤——也可说多个Pass——进行。每个Pass中对IR进行变换和优化，多个Pass组合完成编译器进行的所有优化行为。如上图所示，多个Pass阶段共同完成了中端的分析和优化。 2.3 后端后端将中端转换和优化后的IR翻译成 (未完待续。。。)]]></content>
      <tags>
        <tag>llvm</tag>
        <tag>compiler</tag>
      </tags>
  </entry>
</search>
