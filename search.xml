<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Qemu网络连接]]></title>
    <url>%2F2018%2F08%2F22%2Fqemu-networking%2F</url>
    <content type="text"><![CDATA[关于Qemu虚拟机的联网一直比较令人疑惑，刚开始接触时不免会产生以下几个问题：1.Qemu虚拟机如何通过网络与外界连接？2.Qemu提供哪几种网络连接方式？3.该连接方式支持哪些网络设备？ 如何配置？ 在查阅了一些qemu网络模拟相关的资料后，我将其中的内容进行了整理，最终形成这篇文章。一来帮助自己理解，二来也希望能对有同样疑惑的同学有所帮助。若发现理解有误之处，还请帮忙提出。 概述Qemu的网络配置由两部分组成： 虚拟网络设备，如PCI网卡 网络后端，用于和网络设备交互，如将数据包发往宿主机网络 默认情况下，Qemu会为客户机创建一个SLiRP网络后端以及一个合适的虚拟网络设备（如， 为大多数X86 PC客户机创建一块E1000 PCI网卡）。使用”-net nic -net user”命令选项会产生同样的效果。 针对Qemu网络模拟有以下几点需要注意： 1.如果使用命令参数（-net, -netdev）指定任何网络选项，务必提供充分的选项信息，以确定设备和后端的连接。忘记指定后端或这网络设备将产生一条警告信息，如，此时VM能正常boot但没有网络功能。 2.如果使用默认的SLiRP用户网络，ping(ICMP)功能不工作，但TCP和UDP正常工作。此时，不要使用ping来检查Qemu虚拟机的网络配置！ 网络后端1.如何创建网络后端根据宿主机环境，Qemu提供了多个候选网络后端。创建一个网络后端的命令为：1-netdev TYPE,id=NAME,... id选项有两个作用：1.用于区分不同的网络后端，即使只有一个网络后端也必须使用；2.给定的NAME用于将虚拟网络设备和玩过后端关联起来. 2.网络后端分类通常，若客户机仅仅需要基础的上网功能，如访问一下网页，那么用户模式（slirp）是一个不错的选择。若还有额外的需求，如需要运行某类网络服务或者需要网络以其他方式运行，那么tap通常是最好的选择。换言之，如果你想要简单，那么使用用户模式以及DHCP上网，如果想要严格的控制IP地址和路由，那么使用TUN/TAP网络接口。 2.1.用户模式2.1.1 用户模式网络特点用户模式是Qemu默认的网络后端，使用简单，无需root/Administrator权限，但有如下限制： 开销较大，性能较差；（纯软件模拟实现） 仅支持TCP和UDP协议，通常，ICMP流量无法工作，即客户机内无法ping 在Linux宿主机上，通过在root权限下进行配置可以使得客户机能够ping。（具体操作如下） 12345678910111213141516171819Enabling ping in the guest, on Linux hostsDetermine the main group ID (or one supplementary group ID) of the user that will run QEMU with slirp.In /etc/sysctl.conf (or whatever is appropriate for your host distro), make sure that the whitespace-separated, inclusive group ID range in the net.ipv4.ping_group_range sysctl includes the above group ID.For example, as root,add a new group called unpriv_ping:groupadd unpriv_pingset this group for a number of users as another supplementary group (note, they will have to re-login):for U in user1 user2 ... user_n; do usermod --append --groups unpriv_ping $Udonethen set both sides of the inclusive range in the above sysctl to the numeric ID of the new group:( GROUP_ID=$(getent group unpriv_ping | cut -f 3 -d :) printf &apos;net.ipv4.ping_group_range = %u %u\n&apos; $GROUP_ID $GROUP_ID \ &gt;&gt; /etc/sysctl.conf)sysctl -p 客户机无法直接被宿主机或外部网络访问。 2.1.2 用户模式网络原理用户模式网络基于slirp实现，slirp在Qemu内实现了一套完整的TCP/IP协议栈，基于该协议栈实现了一个虚拟的NAT’d网络。一个典型（默认）的用户网络如下图。 结合上图，说明以下几点： 从客户机中连接到“网关”IP的某个端口会连接到主机的该端口； 可使用“-netdev user”命令来配置用户模式网络； 如下命令会改变网络配置，使用192.168.76.0/24代替默认的10.0.2.0/24，且将guest DHCP从9开始分配（而不是15） 1-netdev user,id=mynet0,net=192.168.76.0/24,dhcpstart=192.168.76.9 可使用”restrict”选项将guest和host（以及更广泛的网络）隔离开，如下面的命令会将网络限制在guest和虚拟设备之间。 1-netdev user,id=mynet0,restrict=y 2.1.3 用户模式网络高级配置额外用户模式网络选项： 设置guest的DHCP地址以及hostname： 1-netdev user,id=n0,host=addr,hostname=name 指定guest-visible虚拟DNS服务器地址： 1-netdev user,id=n0,dns=addr 可模拟一个TFTP服务器： 1-netdev user,id=n0,tftp=xxx,bootfile=yyy 使用smb共在guest和host之间共享文件： 1-netdev user,id=n0,smb=dir,smbserver=addr 从host端口转发至guest： 1-netdev user,id=n0,hostfwd=hostip:hostport-guestip:guestport 更多配置请参考该文档。 2.2 TAP模式2.2.1 基本概念和特点介绍该模式之前先介绍一下TUN/TAP的概念。TUN（即network TUNnel），模拟了一套网络层设备，用于处理三层数据包，如IP数据包。TAP（即network tap），模拟了一套数据链路层设备，用于处理第二层数据包，如Ethernet数据帧。TUN用于路由，TAP用于创建网桥。操作系统经由TUN/TAP发出的数据包被发送到一个用户空间程序,该程序和设备连接。该程序也可将数据包发送到另一个TUN/TAP设备，此时该TUN/TAP设备将数据包发送往操作系统网络协议栈，来模拟从外部接收数据包过程。 Qemu的TAP网络后端正是使用了 主机中 的一个tun或tap网络设备，利用该接口将数据传输到guest OS。使用该方法需要使用ifconfig命令对guest OS的接口进行配置。在TUN/TAP网络模式中，host系统负责在Qemu启动前对接口进行配置。其优点是： 1.性能很好； 2.能够被配置来虚拟创建任何类型的网络拓扑。 其缺点是： 1.需要对主机中的网络拓扑进行配置，而主机中的网络拓扑取决于你使用的操作系统； 2.需要root权限。 2.2.2 工作原理首先，需要在host系统中创建一个虚拟网桥，接着，将所有的虚拟机连接到该网桥上，且在同一个vlan中（默认vlan 0）。如下图： 整个过程依赖于host kernel的TUN/TAP设备驱动。该驱动允许用户空间程序获取一个连接到网络设备的文件描述符，任何经由该文件描述符发往kernel的数据帧会被设备接收，而任何通过该设备传输的数据会被该程序接收。 若给该TAP设备指定一个IP地址，guest中的应用程序将能够连接到Host中监听该IP地址的应用程序。若启用host中的端口转发，guest发出的数据包能够被host kernel转发到互联网。 本质上说，TAP设备就像一个和guest连接到同一个物理网络的网络设备。 2.2.3 配置方法具体的配置包括两部分：host设置，以及guest设置。这里仅仅简述主要步骤，不列举详细操作。细节可参考该文档。 host配置： 解决内核支持的问题 创建网桥 获取TAP设备，打开/dev/net/tun，调用TUNSETIFF ioctl()。需要root权限。 将tap设备添加到网桥 Guest配置 配置网卡连接模式，允许TUN/TAP接口 具体的操作网上有很多可以借鉴的材料，这里不列。 2.3 VDE网络后端VDE网络后端使用了Virtual Distributed Ethernet架构，一般很少用。这里略过不谈。 2.4 Socket网络后端Socket网络后端使得用户可以创建虚拟机之间相互可见的网络。主要用于扩展使用SLiRP后端创建的多个虚拟机的网络。如果用户希望多个虚拟机之间进行通信，tap网络后端相比而言是一个更好的选择，除非用户没有宿主机的host权限。创建方式如下：12-netdev socket,id=mynet0,listen=:1234-netdev socket,id=mynet0,connect=:1234 虚拟网络设备1.如何创建虚拟网络设备用户根据自己的需求和guest环境来选择所需的虚拟网络设备。 对于有PCI总线的机器来说，用户有更多的选择。e1000是qemu默认的虚拟网络适配器，rtl8139是qemu-kvm默认的网络适配器。在qemu和qemu-kvm中，virtio-net网络适配器性能最佳，但需要特殊的guest驱动支持。使用”-device”选项将虚拟网络设备添加到虚拟机上。1-device TYPE,netdev=NAME 这里的NAME正是前面-netdev定义的后端名称，如此将该设备和网络后端关联起来。 2.配置选项一些其他的设备选项可以用于选择其他的设备，以及对设备的某些特性进行配置。如：1-device DEVNAME,netdev=NET-ID,mac=MACADDR,DEV-OPTS DEVNAME是具体的设备，如i82559c代表intel i82559C Ethernet device； NET-ID是网络后端标号； MACADDR是设备的MAC地址； DEV-OPTS是其他的一些选项 可在命令行中使用命令“qemu -device \?”来列出所有支持的设备。 其他 nic 选项如果你不在乎NIC的细节配置，你可以使用“-nic”参数来快速创建一个后端。 遗留的net选项Qemu 最初使用”-net nic“选项而不是”-device DEVNAME“， 使用”-net TYPE“而非”-netdev“ 类型。在Qemu0.12版本后该用法被遗弃，然而当前仍然可以这么用。例如，创建一个虚拟网络设备的用法如下：1-net nic,modle=MODEL 你可以使用“-net nic,model=\?”(命令行需要转义)来获取支持的虚拟网络设备。这些设备名称也许和”-device ?”获取的名称不尽相同。 参考文献：1.QEMU version 3.0.0 User Documentation2.TUN/TAP3.networking qemu virtual bsd systems4.QEMU Networking5.QEMU/Networking]]></content>
      <tags>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下挂载qcow2镜像文件]]></title>
    <url>%2F2018%2F07%2F31%2Fmountqcow2%2F</url>
    <content type="text"><![CDATA[最近在对某IOT设备作分析时，有一个需求是需要从系统中提取出系统中的一个文件。系统的镜像文件以qcow2格式提供，一种很直观的方式是对qemu的网络进行配置，然后利用网络进行传输。但qemu的网络配置是出了名的坑多，于是尝试直接从qcow2镜像文件中把文件提取出来。 这里使用了 qemu-nbd 这个工具，该工具能够将磁盘镜像文件导出为一个network block device（nbd）。操作步骤如下： 安装qemu-nbd。我的qemu环境是从源码编译安装的，已经包含了qemu-nbd。若没有安装也可单独安装： 1╰─$ sudo apt-get install qemu-utils 在挂在qcow2镜像文件之前，先将其转换为nbd。第一条命令记载ndb内核模块，且设置nbd管理的最大分区数为8。接着第二条命令将指定的镜像文件导出为一个nbd设备。 12╰─$ sudo modprobe nbd max_part=8╰─$ sudo qemu-nbd --connect=/dev/nbd0 /path/to/qcow2/image 在这之后，qcow2镜像文件中的磁盘分区会被映射到/dev/nbd0p1, /dev/nbd0p2/…等分区中，可以用fdisk工具进行查看。 1╰─$ sudo fdisk /dev/nbd0 -l 最后，可以选择其中的任一个分区挂载到系统上。如此，就可以直接访问和修改镜像文件中的文件了。 1╰─$ sudo mount /dev/nbd0p1 /mnt 操作结束后，umount后再断开设备链接即可。 12╰─$ sudo umount /mnt╰─$ sudo qemu-nbd --disconnect /dev/nbd0 参考： How to mount qcow2 disk image on Linux]]></content>
      <categories>
        <category>qemu</category>
      </categories>
      <tags>
        <tag>qemu</tag>
        <tag>qcow2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DNS学习与实践（二）—— dig简介]]></title>
    <url>%2F2018%2F04%2F16%2Fdns-dig%2F</url>
    <content type="text"><![CDATA[Dig, domain information groper，是一款专门用于进行DNS查询的工具。 Dig以其灵活性，易用性，以及简明的输出得到了大多数DNS管理员的青睐。Dig支持命令行模式和批处理模式，批处理模式下，dig可以从文件中读取请求并批量处理。话不多说，进入正文。 通常，可使用如下命令使用dig:1dig @server -t &lt;type&gt; &lt;name&gt; &lt;flag&gt; 命令 “ dig -h ” 可显示dig的具体用法：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677Usage: dig [@global-server] [domain] [q-type] [q-class] &#123;q-opt&#125; &#123;global-d-opt&#125; host [@local-server] &#123;local-d-opt&#125; [ host [@local-server] &#123;local-d-opt&#125; [...]]Where: domain is in the Domain Name System q-class is one of (in,hs,ch,...) [default: in] q-type is one of (a,any,mx,ns,soa,hinfo,axfr,txt,...) [default:a] (Use ixfr=version for type ixfr) q-opt is one of: -4 (use IPv4 query transport only) -6 (use IPv6 query transport only) -b address[#port] (bind to source address/port) -c class (specify query class) -f filename (batch mode) -i (use IP6.INT for IPv6 reverse lookups) -k keyfile (specify tsig key file) -m (enable memory usage debugging) -p port (specify port number) -q name (specify query name) -t type (specify query type) -u (display times in usec instead of msec) -x dot-notation (shortcut for reverse lookups) -y [hmac:]name:key (specify named base64 tsig key) d-opt is of the form +keyword[=value], where keyword is: +[no]aaonly (Set AA flag in query (+[no]aaflag)) +[no]additional (Control display of additional section) +[no]adflag (Set AD flag in query (default on)) +[no]all (Set or clear all display flags) +[no]answer (Control display of answer section) +[no]authority (Control display of authority section) +[no]besteffort (Try to parse even illegal messages) +bufsize=### (Set EDNS0 Max UDP packet size) +[no]cdflag (Set checking disabled flag in query) +[no]cl (Control display of class in records) +[no]cmd (Control display of command line) +[no]comments (Control display of comment lines) +[no]crypto (Control display of cryptographic fields in records) +[no]defname (Use search list (+[no]search)) +[no]dnssec (Request DNSSEC records) +domain=### (Set default domainname) +[no]edns[=###] (Set EDNS version) [0] +ednsflags=### (Set EDNS flag bits) +[no]ednsnegotiation (Set EDNS version negotiation) +ednsopt=###[:value] (Send specified EDNS option) +noednsopt (Clear list of +ednsopt options) +[no]expire (Request time to expire) +[no]fail (Don&apos;t try next server on SERVFAIL) +[no]identify (ID responders in short answers) +[no]ignore (Don&apos;t revert to TCP for TC responses.) +[no]keepopen (Keep the TCP socket open between queries) +[no]multiline (Print records in an expanded format) +ndots=### (Set search NDOTS value) +[no]nsid (Request Name Server ID) +[no]nssearch (Search all authoritative nameservers) +[no]onesoa (AXFR prints only one soa record) +[no]opcode=[###] (Set the opcode of the request) +[no]qr (Print question before sending) +[no]question (Control display of question section) +[no]recurse (Recursive mode) +retry=### (Set number of UDP retries) [2] +[no]rrcomments (Control display of per-record comments) +[no]search (Set whether to use searchlist) +[no]short (Display nothing except short form of answer) +[no]showsearch (Search with intermediate results) +[no]split=## (Split hex/base64 fields into chunks) +[no]stats (Control display of statistics) +subnet=addr (Set edns-client-subnet option) +[no]tcp (TCP mode (+[no]vc)) +time=### (Set query timeout) [5] +[no]trace (Trace delegation down from root [+dnssec]) +tries=### (Set number of UDP attempts) [3] +[no]ttlid (Control display of ttls in records) +[no]vc (TCP mode (+[no]tcp)) global d-opts and servers (before host name) affect all queries. local d-opts and servers (after host name) affect only that lookup. -h (print help and exit) -v (print version and exit) 具体参数介绍如下，这里并不笼统翻译，仅对部分参数进行补充说明： server : 所查询的name server的域名或者ip地址。可以是IPV4或IPV6地址，如果是主机名，dig在查询之前会将其解析成域名。若没有提供server参数，dig会默认查询/etc/resolve.conf中的第一个地址；若指定了“-4“或”-6“参数，则仅尝试对应的地址；若无可用地址，则dig发送请求到local host。 name : 要查询的域名。 type : 所查询的请求类型 - ANY, A, MX, SIG等等。若没提供type参数，则默认查询A记录。 -4 Use IPv4 only. -6 Use IPv6 only. -b address[#port] Set the source IP address of the query. The address must be a valid address on one of the host’s network interfaces, or “0.0.0.0” or “::”. An optional port may be specified by appending “#“ -c class Set the query class. The default class is IN; other classes are HS for Hesiod records or CH for Chaosnet records. 域名所关联到的资料会放在资源记录(Resource Records, RR)中，这些记录被分成几种类别（class），不同类别的RR，分别记录相关的网络形态或软件，目前的类别有：internet(任何以TCP/IP为基础的internet架构)，以Chaosnet协议为基础的网络，以及使用Hesiod软件的网络（Chaosnet是一种古董级的网络）。 -f file Batch mode: dig reads a list of lookup requests to process from the given file. Each line in the file should be organized in the same way they would be presented as queries to dig using the command-line interface. -i Do reverse IPv6 lookups using the obsolete RFC1886 IP6.INT domain, which is no longer in use. Obsolete bit string label queries (RFC2874) are not attempted. -k keyfile Sign queries using TSIG using a key read from the given file. Key files can be generated using tsig-keygen(8). When using TSIG authentication with dig, the name server that is queried needs to know the key and algorithm that is being used. In BIND, this is done by providing appropriate key and server statements in named.conf. TSIG提供DNS server在做Zone Transfer及DNS更新(更新zone的设定…)时对其传输资料所做的加密，并对其他DNS Server做认证； ”rndc” command使得使用者能远程管控DNS server，并对传输资料作加密， 以提高DNS server的安全防护。Transaction Signature(TSIG ; RFC 2845)是使用加密签名验证DNS信息，特別是回应与更新。TSIG以MD5 hash加密签名(cryptographic signature)方式，认证DNS server间的资料传输。 -m Enable memory usage debugging. -p port Send the query to a non-standard port on the server, instead of the defaut port 53. This option would be used to test a name server that has been configured to listen for queries on a non-standard port number. -q name The domain name to query. This is useful to distinguish the name from other arguments. -t type The resource record type to query. It can be any valid query type which is supported in BIND 9. The default query type is “A”, unless the -x option is supplied to indicate a reverse lookup. A zone transfer can be requested by specifying a type of AXFR. When an incremental zone transfer (IXFR) is required, set the type to ixfr=N. The incremental zone transfer will contain the changes made to the zone since the serial number in the zone’s SOA record was N. -v Print the version number and exit. -x addr Simplified reverse lookups, for mapping addresses to names. The addr is an IPv4 address in dotted-decimal notation, or a colon-delimited IPv6 address. When the -x is used, there is no need to provide the name, class and type arguments. dig automatically performs a lookup for a name like 94.2.0.192.in-addr.arpa and sets the query type and class to PTR and IN respectively. IPv6 addresses are looked up using nibble format under the IP6.ARPA domain (but see also the -i option). -y [hmac:]keyname:secret Sign queries using TSIG with the given authentication key. keyname is the name of the key, and secret is the base64 encoded shared secret. hmac is the name of the key algorithm; valid choices are hmac-md5, hmac-sha1, hmac-sha224, hmac-sha256, hmac-sha384, or hmac-sha512. If hmac is not specified, the default is hmac-md5. NOTE: You should use the -k option and avoid the -y option, because with -y the shared secret is supplied as a command line argument in clear text. This may be visible in the output from ps(1) or in a history file maintained by the user’s shell. 另外，dig还提供了一些其他选项（flag），用于影响查询的方式和结果的呈现方式。flag以 +keyword=value 的形式使用。具体的flag如下： +[no]aaonly Sets the “aa” flag in the query. Authoritative Answer. +[no]additional Display [do not display] the additional section of a reply. The default is to display it. +[no]adflag Set [do not set] the AD (authentic data) bit in the query. This requests the server to return whether all of the answer and authority sections have all been validated as secure according to the security policy of the server. AD=1 indicates that all records have been validated as secure and the answer is not from a OPT-OUT range. AD=0 indicate that some part of the answer was insecure or not validated. This bit is set by default. +[no]all Set or clear all display flags. +[no]answer Display [do not display] the answer section of a reply. The default is to display it. +[no]authority Display [do not display] the authority section of a reply. The default is to display it. +[no]besteffort Attempt to display the contents of messages which are malformed. The default is to not display malformed answers. +bufsize=B Set the UDP message buffer size advertised using EDNS0 to B bytes. The maximum and minimum sizes of this buffer are 65535 and 0 respectively. Values outside this range are rounded up or down appropriately. Values other than zero will cause a EDNS query to be sent. +[no]cdflag Set [do not set] the CD (checking disabled) bit in the query. This requests the server to not perform DNSSEC validation of responses. +[no]class Display [do not display] the CLASS when printing the record. +[no]cmd Toggles the printing of the initial comment in the output identifying the version of dig and the query options that have been applied. This comment is printed by default. +[no]comments Toggle the display of comment lines in the output. The default is to print comments. +[no]crypto Toggle the display of cryptographic fields in DNSSEC records. The contents of these field are unnecessary to debug most DNSSEC validation failures and removing them makes it easier to see the common failures. The default is to display the fields. When omitted they are replaced by the string “[omitted]” or in the DNSKEY case the key id is displayed as the replacement, e.g. “[ key id = value]”. +[no]defname Deprecated, treated as a synonym for +[no]search +[no]dnssec Requests DNSSEC records be sent by setting the DNSSEC OK bit (DO) in the OPT record in the additional section of the query. +domain=somename Set the search list to contain the single domain somename, as if specified in a domain directive in /etc/resolv.conf, and enable search list processing as if the +search option were given.+[no]edns[=#] Specify the EDNS version to query with. Valid values are 0 to 255. Setting the EDNS version will cause a EDNS query to be sent. +noedns clears the remembered EDNS version. EDNS is set to 0 by default. +[no]ednsflags[=#] Set the must-be-zero EDNS flags bits (Z bits) to the specified value. Decimal, hex and octal encodings are accepted. Setting a named flag (e.g. DO) will silently be ignored. By default, no Z bits are set. +[no]ednsnegotiation Enable / disable EDNS version negotiation. By default EDNS version negotiation is enabled. +[no]ednsopt[=code[:value]] Specify EDNS option with code point code and optionally payload of value as a hexadecimal string. +noednsopt clears the EDNS options to to be sent. +[no]expire Send an EDNS Expire option. +[no]fail Do not try the next server if you receive a SERVFAIL. The default is to not try the next server which is the reverse of normal stub resolver behavior. +[no]identify Show [or do not show] the IP address and port number that supplied the answer when the +short option is enabled. If short form answers are requested, the default is not to show the source address and port number of the server that provided the answer. +[no]ignore Ignore truncation in UDP responses instead of retrying with TCP. By default, TCP retries are performed. +[no]keepopen Keep the TCP socket open between queries and reuse it rather than creating a new TCP socket for each lookup. The default is +nokeepopen. +[no]multiline Print records like the SOA records in a verbose multi-line format with human-readable comments. The default is to print each record on a single line, to facilitate machine parsing of the dig output. +ndots=D Set the number of dots that have to appear in name to D for it to be considered absolute. The default value is that defined using the ndots statement in /etc/resolv.conf, or 1 if no ndots statement is present. Names with fewer dots are interpreted as relative names and will be searched for in the domains listed in the search or domain directive in /etc/resolv.conf if +search is set. +[no]nsid Include an EDNS name server ID request when sending a query. +[no]nssearch When this option is set, dig attempts to find the authoritative name servers for the zone containing the name being looked up and display the SOA record that each name server has for the zone. +[no]onesoa Print only one (starting) SOA record when performing an AXFR. The default is to print both the starting and ending SOA records. +[no]opcode=value Set [restore] the DNS message opcode to the specified value. The default value is QUERY (0). +[no]qr Print [do not print] the query as it is sent. By default, the query is not printed. +[no]question Print [do not print] the question section of a query when an answer is returned. The default is to print the question section as a comment.+[no]rdflag A synonym for +[no]recurse. +[no]recurse Toggle the setting of the RD (recursion desired) bit in the query. This bit is set by default, which means dig normally sends recursive queries. Recursion is automatically disabled when the +nssearch or +trace query options are used. +retry=T Sets the number of times to retry UDP queries to server to T instead of the default, 2. Unlike +tries, this does not include the initial query. +[no]rrcomments Toggle the display of per-record comments in the output (for example, human-readable key information about DNSKEY records). The default is not to print record comments unless multiline mode is active. +[no]search Use [do not use] the search list defined by the searchlist or domain directive in resolv.conf (if any).The search list is not used by default. ´ndots’ from resolv.conf (default 1) which may be overridden by +ndots determines if the name will be treated as relative or not and hence whether a search is eventually performed or not. +[no]short Provide a terse answer. The default is to print the answer in a verbose form. +[no]showsearch Perform [do not perform] a search showing intermediate results. +[no]sigchase Chase DNSSEC signature chains. Requires dig be compiled with -DDIG_SIGCHASE. +[no]sit[=####] Send a Source Identity Token EDNS option, with optional value. Replaying a SIT from a previous response will allow the server to identify a previous client. The default is +nosit. Currently using experimental value 65001 for the option code. +split=W Split long hex- or base64-formatted fields in resource records into chunks of W characters (where W is rounded up to the nearest multiple of 4). +nosplit or +split=0 causes fields not to be split at all. The default is 56 characters, or 44 characters when multiline mode is active. +[no]stats This query option toggles the printing of statistics: when the query was made, the size of the reply and so on. The default behavior is to print the query statistics. +[no]subnet=addr/prefix Send an EDNS Client Subnet option with the specified IP address or network prefix. +[no]tcp Use [do not use] TCP when querying name servers. The default behavior is to use UDP unless an ixfr=N query is requested, in which case the default is TCP. AXFR queries always use TCP. +time=T Sets the timeout for a query to T seconds. The default timeout is 5 seconds. An attempt to set T to less than 1 will result in a query timeout of 1 second being applied. +[no]topdown When chasing DNSSEC signature chains perform a top-down validation. Requires dig be compiled with -DDIG_SIGCHASE.+[no]rdflag A synonym for +[no]recurse. +[no]recurse Toggle the setting of the RD (recursion desired) bit in the query. This bit is set by default, which means dig normally sends recursive queries. Recursion is automatically disabled when the +nssearch or +trace query options are used. +retry=T Sets the number of times to retry UDP queries to server to T instead of the default, 2. Unlike +tries, this does not include the initial query. +[no]rrcomments Toggle the display of per-record comments in the output (for example, human-readable key information about DNSKEY records). The default is not to print record comments unless multiline mode is active. +[no]search Use [do not use] the search list defined by the searchlist or domain directive in resolv.conf (if any). The search list is not used by default. ´ndots’ from resolv.conf (default 1) which may be overridden by +ndots determines if the name will be treated as relative or not and hence whether a search is eventually performed or not. +[no]short Provide a terse answer. The default is to print the answer in a verbose form. +[no]showsearch Perform [do not perform] a search showing intermediate results. +[no]sigchase Chase DNSSEC signature chains. Requires dig be compiled with -DDIG_SIGCHASE. +[no]sit[=####] Send a Source Identity Token EDNS option, with optional value. Replaying a SIT from a previous response will allow the server to identify a previous client. The default is +nosit. Currently using experimental value 65001 for the option code. +split=W Split long hex- or base64-formatted fields in resource records into chunks of W characters (where W is rounded up to the nearest multiple of 4). +nosplit or +split=0 causes fields not to be split at all. The default is 56 characters, or 44 characters when multiline mode is active. +[no]stats This query option toggles the printing of statistics: when the query was made, the size of the reply and so on. The default behavior is to print the query statistics. +[no]subnet=addr/prefix Send an EDNS Client Subnet option with the specified IP address or network prefix. +[no]tcp Use [do not use] TCP when querying name servers. The default behavior is to use UDP unless an ixfr=N query is requested, in which case the default is TCP. AXFR queries always use TCP. +time=T Sets the timeout for a query to T seconds. The default timeout is 5 seconds. An attempt to set T to less than 1 will result in a query timeout of 1 second being applied. +[no]topdown When chasing DNSSEC signature chains perform a top-down validation. Requires dig be compiled with -DDIG_SIGCHASE.+[no]rdflag A synonym for +[no]recurse. +[no]recurse Toggle the setting of the RD (recursion desired) bit in the query. This bit is set by default, which means dig normally sends recursive queries. Recursion is automatically disabled when the +nssearch or +trace query options are used. +retry=T Sets the number of times to retry UDP queries to server to T instead of the default, 2. Unlike +tries, this does not include the initial query. +[no]rrcomments Toggle the display of per-record comments in the output (for example, human-readable key information about DNSKEY records). The default is not to print record comments unless multiline mode is active. +[no]search Use [do not use] the search list defined by the searchlist or domain directive in resolv.conf (if any). The search list is not used by default. ´ndots’ from resolv.conf (default 1) which may be overridden by +ndots determines if the name will be treated as relative or not and hence whether a search is eventually performed or not. +[no]short Provide a terse answer. The default is to print the answer in a verbose form. +[no]showsearch Perform [do not perform] a search showing intermediate results. +[no]sigchase Chase DNSSEC signature chains. Requires dig be compiled with -DDIG_SIGCHASE. +[no]sit[=####] Send a Source Identity Token EDNS option, with optional value. Replaying a SIT from a previous response will allow the server to identify a previous client. The default is +nosit. Currently using experimental value 65001 for the option code. +split=W Split long hex- or base64-formatted fields in resource records into chunks of W characters (where W is rounded up to the nearest multiple of 4). +nosplit or +split=0 causes fields not to be split at all. The default is 56 characters, or 44 characters when multiline mode is active. +[no]stats This query option toggles the printing of statistics: when the query was made, the size of the reply and so on. The default behavior is to print the query statistics. +[no]subnet=addr/prefix Send an EDNS Client Subnet option with the specified IP address or network prefix. +[no]tcp Use [do not use] TCP when querying name servers. The default behavior is to use UDP unless an ixfr=N query is requested, in which case the default is TCP. AXFR queries always use TCP. +time=T Sets the timeout for a query to T seconds. The default timeout is 5 seconds. An attempt to set T to less than 1 will result in a query timeout of 1 second being applied. +[no]topdown When chasing DNSSEC signature chains perform a top-down validation. Requires dig be compiled with -DDIG_SIGCHASE. +[no]trace Toggle tracing of the delegation path from the root name servers for the name being looked up. Tracing is disabled by default. When tracing is enabled, dig makes iterative queries to resolve the name being looked up. It will follow referrals from the root servers, showing the answer from each server that was used to resolve the lookup. If @server is also specified, it affects only the initial query for the root zone name servers. +dnssec is also set when +trace is set to better emulate the default queries from a nameserver. +tries=T Sets the number of times to try UDP queries to server to T instead of the default, 3. If T is less than or equal to zero, the number of tries is silently rounded up to 1. +trusted-key=#### Specifies a file containing trusted keys to be used with +sigchase. Each DNSKEY record must be on its own line. If not specified, dig will look for /etc/trusted-key.key then trusted-key.key in the current directory. Requires dig be compiled with -DDIG_SIGCHASE. +[no]ttlid Display [do not display] the TTL when printing the record. +[no]vc Use [do not use] TCP when querying name servers. This alternate syntax to +[no]tcp is provided for backwards compatibility. The “vc” stands for “virtual circuit”.]]></content>
      <categories>
        <category>随手记</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>dig</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LLVM编译器框架浅析]]></title>
    <url>%2F2018%2F04%2F10%2Fllvm-clang%2F</url>
    <content type="text"><![CDATA[很早就开始接触和使用LLVM，而且垂涎其丰富的工具和扩展功能已久，但一直处于现学现用的阶段，对LLVM的理解也一直是雾里看花。最近正好需要再次用到LLVM，借此机会把LLVM系统的看一看。本文力求从原理和结构上对LLVM有一个基本概述，不求深挖，但求基础全面。 1, 什么是LLVMLLVM从字面上来说是Low-level Virtual Machine，即底层的虚拟机，光从字面上来说看，仍然是一脸懵逼，不知其所以然。 官方介绍定义比较准确：A collection of modular and reusable tools to support both static and dynamic compilation of arbitrary programming languages. 理解一下，主要包含了这几层意思： 1，当然，是编译器（或者编译框架） 2，包含了一个模块化、可重用的工具集； 3，支持静态和动态编译； 4，跨语言。 总之，LLVM是一套很强大的编译系统。 此外，LLVM提供了许多工业级的工具和库，包含了许多子项目，其中最有名的当属Clang。LLVM在工业界也得到了广泛的使用，包括Adobe, Apple, Intel, NVIDIA……等等等等。 总结一下，LLVM具有使用简单（相对而言）， 快速，模块化等诸多有点，it is cool! 2, LLVM 编译系统LLVM编译系统可分为编译器基础组件和编译器框架两部分。 LLVM编译器基础组件为构建编译器提供了可重用的组件，使得构建一个新的编译器的时间开销更小，也为LLVM编译器提供了更多的功能和更好的扩展性。LLVM编译器框架提供了一种编译器框架，通过框架将LLVM编译系统中的基础组件进行组合连接，进而形成具备特定属性、满足特定需求的编译器。框架包含前端、中端和后端三个部分。简单地说，前端将目标语言翻译成LLVM中间语言（LLVM IR），中端基于LLVM IR对程序进行优化分析等，后端将LLVM IR翻译成目标架构的机器指令。整理LLVM编译系统的整体内容如下： 前端： Clang(C/C++/ObjC/OpenCL/OpenMP), flang(Fortran), LDC(D), PGI’s Fortran, etc. 前端插件: Static analyser, clang-tidy, clang-format, clang-complete, etc. 中端: Optimiztion and Analysis passes, integration with Polly, etc. 后端 JIT(MC and ORC), targets: ARM, AArch64, MIPS, PPC, x86, GPUs, BPF, WebAsm, etc. 库 Compiler-RT, libc++/abi, libunwind, OpenMP, libCL, etc. 工具 LLD, LLDB, LNT, readobj, llc, lli, bugpoint, objdump, lto, etc. 下表对LLVM和GNU编译器进行了对比。 LLVM GNU Front-end Clang CC1/CPP Middle-end LLVM GCC Back-end LLVM GCC Assembler LLVM(MC) GAS Linker LLD GNU-LD Libraries Compiler-RT, libc++(no libc) libgcc, stdlibc++, glibc Debugger LLDB/LLDBserver GDB/GDBserver 2.1 三个主要的LLVM组件首先简单介绍一下LLVM中三个重要的组件，包括： LLVM虚拟指令集合 具备语言通用性，且目标无关的IR； 提供了内部IR和固定的外部表示； 为表示和修改程序提供了一种通用的方式。 一批良好集成的库 分析，优化，代码生成，JIT，垃圾回收机制，profiling等等； 无需自己造轮子。 一批基于库构建的工具 汇编器，自动调试器，链接器，代码生成，编译程序驱动器，模块优化等等； 与正常的编译过程相结合。 2.2 前端和所有编译器前端类似，LLVM编译器前端对目标源代码进行解析，最终生成LLVM IR. 2.3 中端中端接着前端的工作，在IR的基础上对程序进行转换和优化，如下图。 要理解中端的优化过程，理解Pass非常重要。如LLVM官网所述： The LLVM Pass Framework is an important part of the LLVM system, because LLVM passes are where most of the interesting parts of the compiler exist. Passes perform the transformations and optimizations that make up the compiler, they build the analysis results that are used by these transformations, and they are, above all, a structuring technique for compiler code. 关于如何写一个Pass，LLVM官网提供了非常详细的参考文档。 LLVM编译系统中对程序的优化分为多个步骤——也可说多个Pass——进行。每个Pass中对IR进行变换和优化，多个Pass组合完成编译器进行的所有优化行为。如上图所示，多个Pass阶段共同完成了中端的分析和优化。 2.4 后端后端将中端转换和优化后的IR翻译成目标架构的汇编语言。转换的过程如下图所示： 首先，将LLVM IR表示成一个有向无环图（SelectionDAG），图的节点是类SDNode的实例，包含了一条目标指令，每个SDNode有一个opcode，operands, type requirements，以及operation properties； 接着，在DAG表示上，对指令进行操作。 Instruction selection pass被用于将non-native的DAG转换成native的目标特定指令。包括： Combining; Legalizing，将DAG变换为使用本地支持的类型和操作; Scheduling; Register Allocation 最后，生成目标汇编指令。 SelectionDAG: 选择有向无环图。指令选择（也成为代码选择，或代码生成），是编译器代码生成器后端所涉及的重要问题之一。另外两个重要问题是指令调度与寄存器分配。指令选择器负责通过尽可能的用好可用的机器指令，将程序从目标机器无关的表示翻译到目标机器特定的形式。 LLVM uses a SelectionDAG to represent LLVM IR instructions, and nodes of the SelectionDAG ideally represent native target instructions. During code generation, instruction selection passes are performed to convert non-native DAG instructions into native target-specific instructions. The pass described in XXXISelDAGToDAG.cpp is used to match patterns and perform DAG-to-DAG instruction selection. Optionally, a pass may be defined (in XXXBranchSelector.cpp) to perform similar DAG-to-DAG operations for branch instructions. Later, the code in XXXISelLowering.cpp replaces or removes operations and data types not supported natively (legalizes) in a SelectionDAG. LLVM同样提供了如何编写一个LLVM后端的参考文档。这里仅列出基本的步骤，用于对整个过程有一个大概的了解，如下： 创建类TargetMachine的子类，用于描述目标机器的特征； 定义目标寄存器集合。使用TableGen，根据目标特定的RegisterInfo.td文件生成寄存器定义、寄存器依赖、寄存器类型的代码。编写TargetRegisterInfo的子类； 定义LLVM IR从指令的DAG表示到本地目标指令的选择和变换； 编写一个将LLVM IR转换成目标机器GAS (GNU Assembler)格式的assembly printer（用于生成汇编指令输出文件）； 可选地，为子目标（如，具有不同能力的版本）增加支持； 可选地，增加JIT支持，创建一个机器代码emitter (TargetJITInfo的子类)，用于直接在内存中生成二进制代码。 小结本文比较highlevel的对LLVM框架进行了一个简单分析，许多重要概念还需结合官方文档来深入理解，这里不再详细呈现。与常规的编译器相比，LLVM提供了更具通用性和扩展性的编译器框架，同时，丰富的库和工具为程序分析提供了丰富而强大的功能。万变不离其宗。要理解LLVM，还是要从编译器的工作原理出发，在结合LLVM具体的实现来尝试理解。 纸上得来终觉浅，后面有时间再整理一下LLVM实践相关的内容。]]></content>
      <categories>
        <category>llvm</category>
      </categories>
      <tags>
        <tag>llvm</tag>
        <tag>compiler</tag>
      </tags>
  </entry>
</search>
